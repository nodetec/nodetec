---
import Header from "../components/Header.astro";
import LeftSidebar from "../components/LeftSidebar.astro";
import RightSidebar from "../components/RightSidebar.astro";
import Footer from "../components/Footer.astro";
import Pagination from "../components/Pagination.astro";
import MainLayout from "./MainLayout.astro";
import "../styles/global.css";

// type Props = CollectionEntry<ContentType>["data"] & {
//   headings: MarkdownHeading[];
//   next?: any;
//   prev?: any;
// };

const { headings, next, prev, ...data } = Astro.props;
const currentPage = Astro.url.pathname;
---

<MainLayout {...data}>
  <div class="flex flex-col">
    <div
      class="sticky top-0 z-40 w-full flex-none border-b border-slate-200 bg-slate-50/95 backdrop-blur transition-colors duration-500 dark:border-slate-700 dark:bg-slate-900/80"
    >
      <Header currentPage={currentPage} />
    </div>

    <div class="overflow-hidden 2xl:flex">
      <div class="max-w-8xl mx-auto px-4 sm:px-6 md:px-8">
        <aside
          class="fixed inset-0 left-[max(0px,calc(50%-45rem))] right-auto top-[3.8125rem] z-20 hidden w-[16.5rem] overflow-y-auto pb-10 lg:block"
        >
          <LeftSidebar currentPage={currentPage} />
        </aside>
        <div class="lg:pl-[16rem]">
          <div class="mx-auto max-w-none xl:ml-0 xl:mr-[15.5rem] xl:pr-16">
            <div
              class="flex flex-col items-center lg:border-l lg:border-slate-200 lg:pl-[3.5rem] lg:dark:border-slate-700"
            >
              <article
                class="markdown dark:prose-dark prose prose-slate mb-16 min-h-[20rem] max-w-3xl pt-10 dark:prose-invert prose-h2:mt-[-5rem] prose-h2:pt-20 lg:mb-48 lg:min-w-[40rem] xl:mb-0"
              >
                <slot />
              </article>
              <Pagination next={next} prev={prev} />
              <Footer />
            </div>
            <aside
              class="fixed bottom-0 right-[max(0px,calc(50%-45rem))] top-[3.8125rem] z-20 hidden w-[19.5rem] overflow-y-auto py-10 xl:block"
            >
              <RightSidebar headings={headings} />
            </aside>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
<script>
  const copySVG = `<svg fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="w-5 h-5">
  <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
</svg>`;

  let titles = document.querySelectorAll(
    ".remark-code-title"
  ) as NodeListOf<HTMLDivElement>;
  titles.forEach((title) => {
    title.dir = "ltr";
  });

  let blocks = document.querySelectorAll("pre");
  blocks.forEach((block) => {
    block.className = "relative flex w-full h-full";
    block.dir = "ltr";

    let copyButton = document.createElement("button");
    copyButton.className =
      "inline-flex absolute right-[.45em] top-[.5em] bg-zinc-100/20 rounded px-1 py-1 text-sm text-zinc-50 hover:bg-zinc-100/25 focus:outline-none focus:shadow-outline text-brand-primary";
    copyButton.innerHTML = copySVG;
    copyButton.addEventListener("click", () => {
      let text = "";
      const pre = copyButton.parentElement;
      let code = pre?.querySelector("code");
      if (code) {
        text = code.innerText;
      } else {
        const span = pre?.querySelector("span");
        if (span) {
          text = span.innerText;
        }
      }
      if (text) {
        try {
          navigator.clipboard.writeText(text);
        } catch (err) {
          console.error("Failed to copy: ", err);
        }
        copyButton.innerHTML = `<svg width="1.3em" height="1.3em" viewBox="0 0 256 256"><path fill="#22c55e" d="M104 192a8.5 8.5 0 0 1-5.7-2.3l-56-56a8.1 8.1 0 0 1 11.4-11.4l50.3 50.4L210.3 66.3a8.1 8.1 0 0 1 11.4 11.4l-112 112a8.5 8.5 0 0 1-5.7 2.3Z"/></svg>`;

        setTimeout(() => {
          copyButton.innerHTML = copySVG;
        }, 1000);
      }
    });

    block.appendChild(copyButton);
    block.setAttribute("tabindex", "0");
  });
</script>
<script is:inline>
  //FIXME: We can make this properly typed later
  /**
   * Allows us to animate the details element
   * for it to work make sure the details element contains a summary element
   * and a div element with the class of content
   * @param {*} element the details element which we wish to animate
   */
  const AnimateDetails = (element) => {
    const summary = element.querySelector("summary");
    const content = element.querySelector(".content");
    let props = { animation: null, isClosing: false, isExpanding: false };

    /**
     * onClick event handler for the summary element
     * @param {*} event the event object
     */
    const onClick = (event) => {
      event.preventDefault();

      element.style.overflow = "hidden";

      if (props.isClosing || !element.open) open();
      else if (props.isExpanded || element.open) close();
    };

    /**
     * Closes the details element
     * This function is in charge of animating the closing of the
     * details element
     */
    const close = () => {
      props.isClosing = true;

      const startHeight = `${element.offsetHeight}px`;
      const endHeight = `${summary.offsetHeight}px`;

      if (props.animation) props.animation.cancel();

      props.animation = element.animate(
        {
          height: [startHeight, endHeight],
        },
        {
          duration: 300,
          easing: "ease-in-out",
        }
      );

      props.animation.onfinish = () => onAnimationFinish(false);
      props.animation.oncancel = () => (props.isClosing = false);
    };

    /**
     * Opens the details element
     * requests the animation frame to animate the opening of the details element
     */
    const open = () => {
      element.style.height = `${summary.offsetHeight}px`;
      element.open = true;
      window.requestAnimationFrame(() => expand());
    };

    /**
     * Expands the details element
     * This function is in charge of animating the expansion of the
     * details element
     */
    const expand = () => {
      props.isExpanding = true;

      const startHeight = `${element.offsetHeight}px`;
      const endHeight = `${content.offsetHeight + summary.offsetHeight}px`;

      if (props.animation) props.animation.cancel();

      props.animation = element.animate(
        {
          height: [startHeight, endHeight],
        },
        {
          duration: 300,
          easing: "ease-in-out",
        }
      );

      props.animation.onfinish = () => onAnimationFinish(true);
      props.animation.oncancel = () => (props.isExpanding = false);
    };

    /**
     * Called when the animation is finished
     * @param {*} open whether the details element is open or not
     */
    const onAnimationFinish = (open) => {
      element.open = open;
      props.animation = null;
      props.isClosing = false;
      props.isExpanding = false;

      element.style.height = element.style.overflow = "";
    };

    /**
     * Adds our new event listener to the summary element
     */
    summary.addEventListener("click", (event) => onClick(event));
  };

  /**
   * Allows us to animate all the details elements on the page
   * Will check if the details element contains a div element with the class of content
   */
  const viableDetails = document.querySelectorAll("details");
  viableDetails.forEach((element) => {
    if (element.querySelector(".content")) {
      AnimateDetails(element);
    }
  });
</script>
<script>
  const main = () => {
    const codeElements = Array.from(document.querySelectorAll("code")).filter(
      (codeElement) => codeElement.parentNode?.nodeName !== "PRE"
    );

    codeElements.forEach((codeElement) => {
      const codeWrapper = document.createElement("div");
      codeWrapper.classList.add("code-wrapper");
      codeElement.parentNode?.insertBefore(codeWrapper, codeElement);

      codeWrapper.appendChild(codeElement);
    });
  };
  main();
</script>
