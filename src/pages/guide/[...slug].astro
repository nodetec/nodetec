---
import { getCollection } from "astro:content";
import DocLayout from "../../layouts/DocLayout.astro";
import type { CollectionType, DocType } from "../../content/config";
import { collections } from "../../content/config";

export async function getStaticPaths() {
  const collectionArr = Object.keys(collections) as CollectionType[];

  const docArr = await Promise.all(
    collectionArr.map(async (collection) => {
      const docs = await getCollection(collection, (item: { id: string }) => {
        return !item.id.endsWith("index.md");
      });
      return docs;
    })
  );

  console.log(docArr)

  return docArr.flat().map((entry: DocType) => ({
    params: {
      slug: entry.collection + "/" + entry.slug,
    },
    props: entry,
  }));
}

const currentPage = Astro.url.pathname;

const collection = currentPage.split("/")[2] as CollectionType;

const post = Astro.props;
const { Content, headings } = await post.render();

const docs = await getCollection(collection, (item: { id: string }) => {
  return !item.id.endsWith("index.md");
});

function getIndexByKey(objects: any, key: string, value: string) {
  for (let i = 0; i < objects.length; i++) {
    if (objects[i][key] === value) {
      return i; // Return the index if the key matches the value
    }
  }
  return -1; // Return -1 if the key-value pair is not found
}

function getPreviousItemByKey(objects: any, key: string, value: string) {
  const currentIndex = getIndexByKey(objects, key, value);
  if (currentIndex !== -1 && currentIndex > 0) {
    return objects[currentIndex - 1];
  }
  return null; // Return null if no previous item exists
}

function getNextItemByKey(objects: any, key: string, value: string) {
  const currentIndex = getIndexByKey(objects, key, value);
  if (currentIndex !== -1 && currentIndex < objects.length - 1) {
    return objects[currentIndex + 1];
  }
  return null; // Return null if no next item exists
}

const prev =  getPreviousItemByKey(docs, "id", post.id);
const next = getNextItemByKey(docs, "id", post.id);

// console.log(prev);
---

<DocLayout headings={headings} next={next} prev={prev} {...post.data}>
<!-- <DocLayout headings={headings} {...post.data}> -->
  <Content />
  <!-- <Pagination next={next} prev={prev} /> -->
</DocLayout>
